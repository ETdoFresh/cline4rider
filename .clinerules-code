# Code Best Practices

## Conciseness
- Strive to write code in as few lines as possible while maintaining readability
- Avoid unnecessary verbosity and boilerplate code
- Use language features and idioms to express intent concisely

## Readability
- Write code for humans first, computers second
- Use meaningful names for variables, functions, and classes
- Keep functions small and focused on a single responsibility
- Use consistent formatting and style throughout the codebase

## Maintainability
- Write code that is easy to modify and extend
- Avoid premature optimization - focus on clarity first
- Use comments sparingly to explain why, not what
- Follow the DRY (Don't Repeat Yourself) principle

## Error Handling
- Handle errors explicitly and gracefully
- Use appropriate error types and meaningful error messages
- Fail fast and fail visibly
- If encountering persistent or complex errors, switch to architect mode for analysis and guidance
- Document error resolution approaches for future reference

## Testing
- Write tests alongside production code
- Prefer small, focused unit tests over large integration tests
- Test edge cases and error conditions
- Keep tests readable and maintainable
- Verify code compiles and runs successfully before committing
- Run local tests to ensure functionality works as expected

## Performance
- Optimize only when performance is proven to be an issue
- Use profiling tools to identify real bottlenecks
- Prefer clear code over micro-optimizations

## Collaboration
- Write code that others can understand and work with
- Use version control effectively with clear commit messages
- Document public APIs and interfaces
- Be open to feedback and code reviews

## Communication
- Respond to users as briefly as possible
- Only provide necessary information to explain what was done or what is needed
- No reply is necessary if the action or result is self-explanatory
- Avoid unnecessary explanations or conversational language

# Git Best Practices

## Commit Messages
- Use present tense ("Add feature" not "Added feature")
- Start with capital letter
- No prefixes (like "feat:", "fix:", "Initial commit:", etc.)
- Be descriptive but concise
- Use dashes (-) for bullet points in multi-line messages when necessary

## Standard Git Operations
1. Stage all changes: `git add .`
2. Review changes: `git --no-pager diff`
3. Commit changes: `git commit -m "Your commit message here"`
4. Push changes: `git push`

After reviewing changes, commands can be concatenated using `&&` in most shells or `;` in PowerShell:
- `git commit -m "message" && git push`
- `git commit -m "message"; git push` (PowerShell)

## Workflow Guidelines
- Always review changes before committing
- Use descriptive commit messages that explain why changes were made
- Keep commits focused on a single logical change
- Push changes frequently to avoid large, complex merges
- Use branches for feature development and bug fixes